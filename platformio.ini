; PlatformIO Project Configuration File

; IMPORTANT: Please read ./lib/Architecture.md file BEFORE making changes to this file, as
; it contains information about the project structure and test environment.

[env]
lib_deps = 
	https://github.com/hideakitai/ArduinoEigen
extra_scripts = 
    ; pre:scripts/pre_build.py
platform_packages =
    platformio/tool-scons
build_flags = 
    -std=gnu++17                # Enable C++17 features    
monitor_filters = direct

; See https://github.com/platformio/platformio-docs/blob/develop/platforms/teensy_extra.rst
; for more information on Teensy-specific build flags

[env:teensy41]
platform = teensy
board = teensy41
framework = arduino
board_build.f_cpu = 600000000L
test_framework = doctest           ; Configure DocTest properly
test_speed = 115200                ; Serial speed for hardware tests
lib_deps = 
    ${env.lib_deps}
    fastled/FastLED @ ~3.9.12
    https://github.com/LAtimes2/InternalTemperature
    https://github.com/adafruit/Adafruit_LSM6DS
    doctest/doctest@^2.4.11        ; Always include DocTest library
build_src_filter =
    +<**/*.c>
    +<**/*.cpp>
    -<_old_scenes/**>
    -<models/**>
    -<particle.cpp>
    -<simulator/**>
    -<simulator.cpp>
    -<web_simulator.cpp>        ; Exclude web-specific code
build_flags = 
    ${env.build_flags}
    -D CORE_DEBUG_LEVEL=2
    -D PLATFORM_TEENSY
	-Wno-unused-variable        ; For registration static bools
    -Wno-psabi                  ; silence fastled/teensy41 warnings
    -fno-exceptions             ; Disable C++ exceptions (teensy doesn't support them)
    -fno-non-call-exceptions    ; Disable non-call exceptions

; When running tests with PlatformIO, it will automatically:
; 1. Skip main.cpp during test builds
; 2. Add the PIO_UNIT_TESTING macro
; 3. Use the appropriate test main file
test_filter = test_hardware
test_ignore = test_native

; Native test environment is still kept separate since it's a different platform
[env:native]
platform = native
test_framework = doctest
lib_ldf_mode = chain+
lib_deps =
    ${env.lib_deps}
    doctest/doctest@^2.4.11
build_flags = 
    ${env.build_flags}  
    -I"test/fixtures"
    -I"test/helpers"
    -I"lib/PixelTheater/include"    
    -I"src/models"          # user-defined stage models for use in hardware
    -I"test/test_native"    # test stage models in test/test_native/fixtures/models
    -I".pio/libdeps/native/doctest/doctest"
    -I".pio/libdeps/native/ArduinoEigen/ArduinoEigen"
    -DPLATFORM_NATIVE
build_src_filter =
    +<**/*.c>
    +<**/*.cpp>
    -<_old_scenes/**>
    -<color_utils.cpp>
    -<particle.cpp>
    -<web_simulator.cpp>
    -<web_build_proxy.cpp>
test_filter = 
    test_native
test_ignore = 
    test_hardware

; Web environment for building and testing the web simulator
[env:web]
platform = native   ; Use native platform with no framework
framework = 
extra_scripts = 
    post:scripts/web_build.py        ; Post-build script to run the Makefile
lib_deps =
    ${env.lib_deps}
    https://github.com/emscripten-core/emscripten  ; This provides headers only
test_framework = doctest        ; Enable testing with doctest
test_speed = 115200
test_filter = test_web
test_ignore = test_hardware, test_native
build_flags =
    ${env.build_flags}
    -DPLATFORM_WEB
    -DEMSCRIPTEN
    ; Include paths for testing and development
    -I".pio/libdeps/web/ArduinoEigen/ArduinoEigen"
    -I"test/fixtures"
    -I"test/helpers"
    -I"lib/PixelTheater/include"
    -I"src/models"
    -I"src"
    -I".pio/libdeps/web/emscripten/system/include"
build_src_filter =
    -<**/*.c>                   ; Exclude everything else
    -<**/*.cpp>
    +<web_build_proxy.cpp>      ; Only include our proxy file for PlatformIO
